{% extends "pg/index.html.jinja" %}

{% block css %}
{{ super() }}
<link href="{{ url_for('pg.static', filename='css/prism.css') }}" rel="stylesheet">
<style>
    .para,
    .question {
        max-width: 66ch;
    }

    .choco {
        color: red;
    }
</style>
{% endblock css %}


{% block main %}
<div class="container mt-3 pt-5">
    <div class="row">
        <div class="col">
            <div>
                <span class="display-5 pyduck-title__duckwave_pg">Inheritance and <br>Object-oriented Design</span>
            </div>
            <div class="fs-3 fw-bold">1) Introduction</div>

            <div class="pt-3 para">
                In the last reading, we introduced the class keyword, which allows us to make new types of Python
                objects. While using classes is not strictly necessary (in the sense that any program that we can write
                using classes could also be written without them), they turn out to be a powerful organizational tool,
                and, as we saw last week, they also give us some neat ways to integrate our custom types into Python so
                that they can make use of built-in operators and functions.
            </div>
            <div class="pt-3 para">
                In this reading, we'll build on what we learned last week and introduce several new features that we can
                make
                use of when defining classes of our own, and we hope to do this in a way that demonstrates the power of
                classes
                as an organizational tool.
            </div>
            <div class="pt-3 para">
                We're going to start this reading with somewhat-small, somewhat-contrived examples that we'll use to
                review
                some
                of the features introduced in the last reading and also to introduce the idea of inheritance. Once we've
                walked
                through several examples like that, we'll pull back and take a look at using these ideas to organize a
                bigger,
                more-authentic program.
            </div>
            <div class="pt-3 para">
                But we'll start with a small example, which should just be review from last time:
                <pre><code class="language-python">
x = "dog"

class A:
    pass

a = A()
print(a.x)
                </code></pre>
            </div>
            <div class="question p-3 border rounded-2">
                Which of the following is printed when we run this program? Using the rules established in the last
                reading, draw an environment diagram to explain this result.
            </div>
            <div class="pt-3 para">
                Now, let's consider a slight modification of the program above (where the body of the <code>A</code>
                class is <code>x = 'cat'</code> rather than <code>pass</code>):
                <pre data-line="4">
<code class="language-python">x = "dog"

class A:
    x = "cat"

a = A()
print(a.x)
</code></pre>

            </div>
        </div>
    </div>
</div>
{% endblock main %}

{% block javascript %}
<script src="{{ url_for('pg.static', filename='js/prism.js')}}"></script>
{% endblock javascript %}
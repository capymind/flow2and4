{% extends "pg/index.html.jinja" %}

{% block css %}
{{ super() }}
<link href="{{ url_for('pg.static', filename='css/prism.css') }}" rel="stylesheet">
<style>
    .para,
    .question {
        max-width: 66ch;
    }

    .choco {
        color: red;
    }
</style>
{% endblock css %}


{% block main %}
<div class="container mt-3 pt-5">
    <div class="row">
        <div class="col">
            <div>
                <span class="display-5 pyduck-title__duckwave_pg">Functional Programming</span>
            </div>
            <div class="fs-3 fw-bold">1) Introduction</div>
            <div class="pt-3 para">
                Functions were one of the first Python features that we studied this semester, but they are a remarkably
                versatile feature that deserves more attention. Functional programming is a classic programming style
                heavily focused on functions. As recently as the mid-2000s, functional programming was seen by industry
                as a niche academic idea, but, in the mean time, it went quite mainstream. While it was originally
                associated with distinct programming languages like Haskell, many of its best ideas were adopted by
                better-known languages like Python. We've been using those features (like lambda) all along this
                semester, and this reading will show you even more handy patterns in functional programming.
            </div>
            <div class="pt-3 para">
                As it happens, one of the first programming languages that worked on multiple different kinds of
                computers was LISP, and it arguably introduced functional programming as a practical style, way back in
                1958. This week's lab will lead you through implementing your own subset of LISP. Getting a better
                understanding of functions and their uses is also directly relevant to that experience.
            </div>
            <div class="pt-3 fs-3 fw-bold">
                2) More Iteratin to Recursion
            </div>
            <div class="pt-3 para">
                One interesting feature of LISP is that it does not feature any looping structures (there are no
                <code>for</code> or
                <code>while</code> loops). But it does have functions, and, as we've seen before, it's possible to use
                functions to
                implement loops. One of the first examples we looked at, factorial, could always be written with a loop
                like so:
            </div>
            <div class="para">
                <pre><code class="language-python">
def factorial(n):
    result = 1
    for i in range(1, n+1):
        result *= i
    return result
                </code></pre>
            </div>
            <div class="pt-3 para">
                But we also learned that it can be written recursively as a one-liner.
            </div>
            <div class="pt-3 para">
                <pre><code class="language-python">
def factorial(n):
    return 1 if n <= 1 else n * factorial(n-1)
                </code></pre>
            </div>

        </div>
    </div>
</div>
{% endblock main %}

{% block javascript %}
<script src="{{ url_for('pg.static', filename='js/prism.js')}}"></script>
{% endblock javascript %}